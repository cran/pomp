% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wpfilter.R
\name{wpfilter}
\alias{wpfilter}
\alias{wpfilter,ANY-method}
\alias{wpfilter,missing-method}
\alias{wpfilterd_pomp-class}
\alias{wpfilterd_pomp}
\alias{wpfilter-data.frame}
\alias{wpfilter,data.frame-method}
\alias{wpfilter-pomp}
\alias{wpfilter,pomp-method}
\alias{wpfilter-wpfilterd_pomp}
\alias{wpfilter,wpfilterd_pomp-method}
\title{Weighted particle filter}
\usage{
\S4method{wpfilter}{data.frame}(
  data,
  Np,
  params,
  rinit,
  rprocess,
  dmeasure,
  trigger = 1,
  target = 0.5,
  ...,
  verbose = getOption("verbose", FALSE)
)

\S4method{wpfilter}{pomp}(
  data,
  Np,
  trigger = 1,
  target = 0.5,
  ...,
  verbose = getOption("verbose", FALSE)
)

\S4method{wpfilter}{wpfilterd_pomp}(data, Np, trigger, target, ..., verbose = getOption("verbose", FALSE))
}
\arguments{
\item{data}{either a data frame holding the time series data,
or an object of class \sQuote{pomp},
i.e., the output of another \pkg{pomp} calculation.}

\item{Np}{the number of particles to use.
This may be specified as a single positive integer, in which case the same number of particles will be used at each timestep.
Alternatively, if one wishes the number of particles to vary across timesteps, one may specify \code{Np} either as a vector of positive integers of length \preformatted{length(time(object,t0=TRUE))} or as a function taking a positive integer argument.
In the latter case, \code{Np(k)} must be a single positive integer, representing the number of particles to be used at the \code{k}-th timestep:
\code{Np(0)} is the number of particles to use going from \code{timezero(object)} to \code{time(object)[1]},
\code{Np(1)}, from \code{timezero(object)} to \code{time(object)[1]},
and so on,
while when \code{T=length(time(object))}, \code{Np(T)} is the number of particles to sample at the end of the time-series.}

\item{params}{optional; named numeric vector of parameters.
This will be coerced internally to storage mode \code{double}.}

\item{rinit}{simulator of the initial-state distribution.
This can be furnished either as a C snippet, an \R function, or the name of a pre-compiled native routine available in a dynamically loaded library.
Setting \code{rinit=NULL} sets the initial-state simulator to its default.
For more information, see \link[=rinit_spec]{?rinit_spec}.}

\item{rprocess}{simulator of the latent state process, specified using one of the \link[=rprocess_spec]{rprocess plugins}.
Setting \code{rprocess=NULL} removes the latent-state simulator.
For more information, \link[=rprocess_spec]{see ?rprocess_spec for the documentation on these plugins}.}

\item{dmeasure}{evaluator of the measurement model density, specified either as a C snippet, an \R function, or the name of a pre-compiled native routine available in a dynamically loaded library.
Setting \code{dmeasure=NULL} removes the measurement density evaluator.
For more information, see \link[=dmeasure_spec]{?dmeasure_spec}.}

\item{trigger}{numeric; if the effective sample size becomes smaller than \code{trigger * Np}, resampling is triggered.}

\item{target}{numeric; target power.}

\item{...}{additional arguments supply new or modify existing model characteristics or components.
See \code{\link{pomp}} for a full list of recognized arguments.

When named arguments not recognized by \code{\link{pomp}} are provided, these are made available to all basic components via the so-called \dfn{userdata} facility.
This allows the user to pass information to the basic components outside of the usual routes of covariates (\code{covar}) and model parameters (\code{params}).
See \link[=userdata]{?userdata} for information on how to use this facility.}

\item{verbose}{logical; if \code{TRUE}, diagnostic messages will be printed to the console.}
}
\value{
An object of class \sQuote{wpfilterd_pomp}, which extends class \sQuote{pomp}.
Information can be extracted from this object using the methods documented below.
}
\description{
A sequential importance sampling (particle filter) algorithm.
Unlike in \code{pfilter}, resampling is performed only when triggered by
deficiency in the effective sample size.
}
\details{
\bold{This function is experimental and should be considered in alpha stage.
Both interface and underlying algorithms may change without warning at any time.
Please explore the function and give feedback via the \pkg{pomp} Issues page.}
}
\section{Methods}{

\describe{
\item{\code{\link{logLik}}}{ the estimated log likelihood}
\item{\code{\link{cond.logLik}}}{ the estimated conditional log likelihood}
\item{\code{\link{eff.sample.size}}}{the (time-dependent) estimated effective sample size}
\item{\code{\link{as.data.frame}}}{ coerce to a data frame}
\item{\code{\link{plot}}}{diagnostic plots}
}
}

\references{
\Arulampalam2002
}
\seealso{
Other elementary POMP methods: 
\code{\link{pfilter}()},
\code{\link{pomp-package}},
\code{\link{probe}()},
\code{\link{simulate}()},
\code{\link{spect}()}

Other particle filter methods: 
\code{\link{bsmc2}()},
\code{\link{cond.logLik}()},
\code{\link{eff.sample.size}()},
\code{\link{filter.mean}()},
\code{\link{filter.traj}()},
\code{\link{mif2}()},
\code{\link{pfilter}()},
\code{\link{pmcmc}()},
\code{\link{pred.mean}()},
\code{\link{pred.var}()},
\code{\link{saved.states}()}
}
\author{
Aaron A. King
}
\concept{elementary POMP methods}
\concept{particle filter methods}
