New in version 0.20-2:

    *The lookup_table (see file 'include/pomp.h') interface for C codes has been streamlined.
    It is now slightly more straightforward to set up a 'struct lookup_table'.
    See the examples ('include/examples').

    *The SIR example ('examples/sir.R') now includes two pomps: one with native routines implementing rprocess, dprocess, and skeleton, the other using R files.
    The comparison may be instructive.

New in version 0.20-1

    This is a major revision.

    *The basic structure of the 'pomp' class has been changed to better support the use of native routines as well as R functions.
    In particular, the 'rmeasure', 'dmeasure', and 'skeleton' methods can now be specified either as R functions or as native routines.
    Native routines are specified by name; an optional 'PACKAGE' argument is provided to narrow the search.
    The search is done not at the time of the call to 'pomp' but at the time the function is used.

    *Support has been added for covariates, in the form of lookup tables.
    This has been accomplished through the addition of slots 'tcovar', 'covar', and 'covarnames' to the 'pomp' class.
    'rmeasure', 'dmeasure', 'skeleton', and 'init.state' now perform lookup when covariates exist and pass this information to the user-defined function.
    'rprocess' and 'dprocess' receive the full lookup table ('tcovar' plus 'covar').

    *'rmeasure', 'dmeasure', and 'skeleton' are now specified by a function (or native routine) that does the computation for ONE state vector and ONE parameter vector.
    This is analogous to the way that 'init.state' has operated from the beginning.
    It greatly simplifies model specification from the user's point of view without changing the low-level methods interfaces (pomp methods 'rmeasure', 'dmeasure', 'skeleton', 'init.states').
    However, THIS CHANGE IS NOT BACKWARD-COMPATIBLE: users will need to rewrite code for the 'rmeasure', 'dmeasure', and 'skeleton' slots.
    In practice, this should not be difficult.
    It involves removing loops over 'times' and columns of 'params' and (if covariates are used in the measurement model or deterministic skeleton) making use of the 'covars' argument passed to the user function.

    *The interface to the 'euler.simulate' and 'euler.density' facilities have changed to make them consistent with the new pomp class.

    *The header files have been reorganized: 'include/euler.h' and 'include/lookup_table.h' have been replaced with a single 'include/pomp.h'.
    Significant additions have been made to support the new structure of the pomp class.
    Specifically, new prototypes have been defined for native routines to implement the measurement model, the process model, and the deterministic skeleton.
