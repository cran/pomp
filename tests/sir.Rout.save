
R version 2.14.1 (2011-12-22)
Copyright (C) 2011 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
Loading required package: mvtnorm
Loading required package: subplex
Loading required package: deSolve
> 
> tbasis <- seq(0,25,by=1/52)
> basis <- periodic.bspline.basis(tbasis,nbasis=3)
> colnames(basis) <- paste("seas",1:3,sep='')
> 
> ## some parameters
> params <- c(
+             gamma=26,mu=0.02,iota=0.01,
+             beta1=1200,beta2=1800,beta3=600,
+             beta.sd=1e-3,
+             pop=2.1e6,
+             rho=0.6,
+             S.0=26/1200,I.0=0.001,R.0=1-0.001-26/1200
+             )
> 
> ## set up the pomp object
> ## the C codes "sir_euler_simulator" and "sir_euler_density" are included in the "examples" directory (file "sir.c")
> po <- pomp(
+            times=1/52*seq.int(length=4*52),
+            data=rbind(reports=numeric(52*4)),
+            t0=0,
+            tcovar=tbasis,
+            covar=basis,
+            zeronames=c("cases"),
+            rprocess=euler.sim(
+              delta.t=1/52/20,
+              step.fun=function(t,x,params,covars,delta.t,...) {
+                params <- exp(params)
+                with(
+                     as.list(c(x,params)),
+                     {
+                       beta <- exp(sum(log(c(beta1,beta2,beta3))*covars))
+                       beta.var <- beta.sd^2
+                       dW <- rgamma(n=1,shape=delta.t/beta.var,scale=beta.var)
+                       foi <- (iota+beta*I*dW/delta.t)/pop
+                       trans <- c(
+                                  rpois(n=1,lambda=mu*pop*delta.t),
+                                  reulermultinom(n=1,size=S,rate=c(foi,mu),dt=delta.t),
+                                  reulermultinom(n=1,size=I,rate=c(gamma,mu),dt=delta.t),
+                                  reulermultinom(n=1,size=R,rate=c(mu),dt=delta.t)
+                                  )
+                       c(
+                         S=S+trans[1]-trans[2]-trans[3],
+                         I=I+trans[2]-trans[4]-trans[5],
+                         R=R+trans[4]-trans[6],
+                         cases=cases+trans[4],
+                         W=if (beta.sd>0) W+(dW-delta.t)/beta.sd else W,
+                         B=trans[1],
+                         SI=trans[2],
+                         SD=trans[3],
+                         IR=trans[4],
+                         ID=trans[5],
+                         RD=trans[6],
+                         dW=dW
+                         )
+                     }
+                     )
+              }
+              ),
+            dprocess=onestep.dens(
+              dens.fun=function(t1,t2,params,x1,x2,covars,...) {
+                params <- exp(params)
+                with(
+                     as.list(params),
+                     {
+                       dt <- t2-t1
+                       beta <- exp(sum(log(c(beta1,beta2,beta3))*covars))
+                       beta.var <- beta.sd^2
+                       dW <- x2['dW']
+                       foi <- (iota+beta*x1["I"]*dW/dt)/pop
+                       probs <- c(
+                                  dpois(x=x2["B"],lambda=mu*pop*dt,log=T),
+                                  deulermultinom(x=x2[c("SI","SD")],size=x1["S"],rate=c(foi,mu),dt=dt,log=T),
+                                  deulermultinom(x=x2[c("IR","ID")],size=x1["I"],rate=c(gamma,mu),dt=dt,log=T),
+                                  deulermultinom(x=x2["RD"],size=x1["R"],rate=c(mu),dt=dt,log=T),
+                                  dgamma(x=dW,shape=dt/beta.var,scale=beta.var,log=T)
+                                  )
+                       sum(probs)
+                     }
+                     )
+              }
+              ),
+            skeleton.type="vectorfield",
+            skeleton=function(x,t,params,covars,...) {
+              xdot <- rep(0,length(x))
+              params <- exp(params)
+              with(
+                   as.list(c(x,params)),
+                   {
+                     beta <- exp(sum(log(c(beta1,beta2,beta3))*covars))
+                     foi <- (iota+beta*I)/pop
+                     terms <- c(
+                                mu*pop,
+                                foi*S,
+                                mu*S,
+                                gamma*I,
+                                mu*I,
+                                mu*R
+                                )
+                     xdot[1:4] <- c(
+                                    terms[1]-terms[2]-terms[3],
+                                    terms[2]-terms[4]-terms[5],
+                                    terms[4]-terms[6],
+                                    terms[4]
+                                    )
+                     xdot
+                   }
+                   )
+            },
+ #           measurement.model=reports~binom(size=cases,prob=exp(rho)),
+            rmeasure=function(x,t,params,covars,...){
+              with(
+                   as.list(c(x,exp(params))),
+                   {
+                     rep <- round(rnorm(n=1,mean=rho*cases,sd=sqrt(rho*(1-rho)*cases)))
+                     if (rep<0) rep <- 0
+                     c(reports=rep)
+                   }
+                   )
+            },
+            dmeasure=function(y,x,t,params,log,covars,...){
+              with(
+                   as.list(c(x,exp(params))),
+                   {
+                     if (y > 0) 
+                       f <- diff(pnorm(q=y+c(-0.5,0.5),mean=rho*cases,sd=sqrt(rho*(1-rho)*cases),lower.tail=TRUE,log.p=FALSE))
+                     else
+                       f <- pnorm(q=0.5,mean=rho*cases,sd=sqrt(rho*(1-rho)*cases),lower.tail=TRUE,log.p=FALSE)
+                     if (log) log(f) else f
+                   }
+                   )
+            },
+            initializer=function(params,t0,...){
+              p <- exp(params)
+              with(
+                   as.list(p),
+                   {
+                     fracs <- c(S.0,I.0,R.0)
+                     x0 <- c(
+                             round(pop*fracs/sum(fracs)), # make sure the three compartments sum to 'pop' initially
+                             rep(0,9)	# zeros for 'cases', 'W', and the transition numbers
+                             )
+                     names(x0) <- c("S","I","R","cases","W","B","SI","SD","IR","ID","RD","dW")
+                     x0["cases"] <- gamma/52*x0["I"]
+                     x0
+                   }
+                   )
+            }
+            )
> 
> show(po)
data and states:
          time reports      seas1      seas2      seas3
1   0.01923077       0 0.66343428 0.19708101 0.13948471
2   0.03846154       0 0.65412115 0.23024769 0.11563116
3   0.05769231       0 0.63930336 0.26559063 0.09510602
4   0.07692308       0 0.61955697 0.30253376 0.07790927
5   0.09615385       0 0.59545806 0.34050101 0.06404093
6   0.11538462       0 0.56758269 0.37891633 0.05350099
7   0.13461538       0 0.53650693 0.41720362 0.04628945
8   0.15384615       0 0.50280686 0.45478683 0.04240631
9   0.17307692       0 0.46705854 0.49108989 0.04185158
10  0.19230769       0 0.42983804 0.52553672 0.04462525
11  0.21153846       0 0.39172143 0.55755125 0.05072732
12  0.23076923       0 0.35328478 0.58655743 0.06015779
13  0.25000000       0 0.31510417 0.61197917 0.07291667
14  0.26923077       0 0.27775565 0.63324040 0.08900394
15  0.28846154       0 0.24181531 0.64976507 0.10841963
16  0.30769231       0 0.20785920 0.66097709 0.13116371
17  0.32692308       0 0.17646341 0.66630040 0.15723619
18  0.34615385       0 0.14817554 0.66521582 0.18660863
19  0.36538462       0 0.12321252 0.65786560 0.21892187
20  0.38461538       0 0.10157791 0.64481869 0.25360340
21  0.40384615       0 0.08327170 0.62665116 0.29007714
22  0.42307692       0 0.06829389 0.60393908 0.32776703
23  0.44230769       0 0.05664448 0.57725852 0.36609700
24  0.46153846       0 0.04832347 0.54718556 0.40449097
25  0.48076923       0 0.04333087 0.51429625 0.44237289
26  0.50000000       0 0.04166667 0.47916667 0.47916667
27  0.51923077       0 0.04333087 0.44237289 0.51429625
28  0.53846154       0 0.04832347 0.40449097 0.54718556
29  0.55769231       0 0.05664448 0.36609700 0.57725852
30  0.57692308       0 0.06829389 0.32776703 0.60393908
31  0.59615385       0 0.08327170 0.29007714 0.62665116
32  0.61538462       0 0.10157791 0.25360340 0.64481869
33  0.63461538       0 0.12321252 0.21892187 0.65786560
34  0.65384615       0 0.14817554 0.18660863 0.66521582
35  0.67307692       0 0.17646341 0.15723619 0.66630040
36  0.69230769       0 0.20785920 0.13116371 0.66097709
37  0.71153846       0 0.24181531 0.10841963 0.64976507
38  0.73076923       0 0.27775565 0.08900394 0.63324040
39  0.75000000       0 0.31510417 0.07291667 0.61197917
40  0.76923077       0 0.35328478 0.06015779 0.58655743
41  0.78846154       0 0.39172143 0.05072732 0.55755125
42  0.80769231       0 0.42983804 0.04462525 0.52553672
43  0.82692308       0 0.46705854 0.04185158 0.49108989
44  0.84615385       0 0.50280686 0.04240631 0.45478683
45  0.86538462       0 0.53650693 0.04628945 0.41720362
46  0.88461538       0 0.56758269 0.05350099 0.37891633
47  0.90384615       0 0.59545806 0.06404093 0.34050101
48  0.92307692       0 0.61955697 0.07790927 0.30253376
49  0.94230769       0 0.63930336 0.09510602 0.26559063
50  0.96153846       0 0.65412115 0.11563116 0.23024769
51  0.98076923       0 0.66343428 0.13948471 0.19708101
52  1.00000000       0 0.66666667 0.16666667 0.16666667
53  1.01923077       0 0.66343428 0.19708101 0.13948471
54  1.03846154       0 0.65412115 0.23024769 0.11563116
55  1.05769231       0 0.63930336 0.26559063 0.09510602
56  1.07692308       0 0.61955697 0.30253376 0.07790927
57  1.09615385       0 0.59545806 0.34050101 0.06404093
58  1.11538462       0 0.56758269 0.37891633 0.05350099
59  1.13461538       0 0.53650693 0.41720362 0.04628945
60  1.15384615       0 0.50280686 0.45478683 0.04240631
61  1.17307692       0 0.46705854 0.49108989 0.04185158
62  1.19230769       0 0.42983804 0.52553672 0.04462525
63  1.21153846       0 0.39172143 0.55755125 0.05072732
64  1.23076923       0 0.35328478 0.58655743 0.06015779
65  1.25000000       0 0.31510417 0.61197917 0.07291667
66  1.26923077       0 0.27775565 0.63324040 0.08900394
67  1.28846154       0 0.24181531 0.64976507 0.10841963
68  1.30769231       0 0.20785920 0.66097709 0.13116371
69  1.32692308       0 0.17646341 0.66630040 0.15723619
70  1.34615385       0 0.14817554 0.66521582 0.18660863
71  1.36538462       0 0.12321252 0.65786560 0.21892187
72  1.38461538       0 0.10157791 0.64481869 0.25360340
73  1.40384615       0 0.08327170 0.62665116 0.29007714
74  1.42307692       0 0.06829389 0.60393908 0.32776703
75  1.44230769       0 0.05664448 0.57725852 0.36609700
76  1.46153846       0 0.04832347 0.54718556 0.40449097
77  1.48076923       0 0.04333087 0.51429625 0.44237289
78  1.50000000       0 0.04166667 0.47916667 0.47916667
79  1.51923077       0 0.04333087 0.44237289 0.51429625
80  1.53846154       0 0.04832347 0.40449097 0.54718556
81  1.55769231       0 0.05664448 0.36609700 0.57725852
82  1.57692308       0 0.06829389 0.32776703 0.60393908
83  1.59615385       0 0.08327170 0.29007714 0.62665116
84  1.61538462       0 0.10157791 0.25360340 0.64481869
85  1.63461538       0 0.12321252 0.21892187 0.65786560
86  1.65384615       0 0.14817554 0.18660863 0.66521582
87  1.67307692       0 0.17646341 0.15723619 0.66630040
88  1.69230769       0 0.20785920 0.13116371 0.66097709
89  1.71153846       0 0.24181531 0.10841963 0.64976507
90  1.73076923       0 0.27775565 0.08900394 0.63324040
91  1.75000000       0 0.31510417 0.07291667 0.61197917
92  1.76923077       0 0.35328478 0.06015779 0.58655743
93  1.78846154       0 0.39172143 0.05072732 0.55755125
94  1.80769231       0 0.42983804 0.04462525 0.52553672
95  1.82692308       0 0.46705854 0.04185158 0.49108989
96  1.84615385       0 0.50280686 0.04240631 0.45478683
97  1.86538462       0 0.53650693 0.04628945 0.41720362
98  1.88461538       0 0.56758269 0.05350099 0.37891633
99  1.90384615       0 0.59545806 0.06404093 0.34050101
100 1.92307692       0 0.61955697 0.07790927 0.30253376
101 1.94230769       0 0.63930336 0.09510602 0.26559063
102 1.96153846       0 0.65412115 0.11563116 0.23024769
103 1.98076923       0 0.66343428 0.13948471 0.19708101
104 2.00000000       0 0.66666667 0.16666667 0.16666667
105 2.01923077       0 0.66343428 0.19708101 0.13948471
106 2.03846154       0 0.65412115 0.23024769 0.11563116
107 2.05769231       0 0.63930336 0.26559063 0.09510602
108 2.07692308       0 0.61955697 0.30253376 0.07790927
109 2.09615385       0 0.59545806 0.34050101 0.06404093
110 2.11538462       0 0.56758269 0.37891633 0.05350099
111 2.13461538       0 0.53650693 0.41720362 0.04628945
112 2.15384615       0 0.50280686 0.45478683 0.04240631
113 2.17307692       0 0.46705854 0.49108989 0.04185158
114 2.19230769       0 0.42983804 0.52553672 0.04462525
115 2.21153846       0 0.39172143 0.55755125 0.05072732
116 2.23076923       0 0.35328478 0.58655743 0.06015779
117 2.25000000       0 0.31510417 0.61197917 0.07291667
118 2.26923077       0 0.27775565 0.63324040 0.08900394
119 2.28846154       0 0.24181531 0.64976507 0.10841963
120 2.30769231       0 0.20785920 0.66097709 0.13116371
121 2.32692308       0 0.17646341 0.66630040 0.15723619
122 2.34615385       0 0.14817554 0.66521582 0.18660863
123 2.36538462       0 0.12321252 0.65786560 0.21892187
124 2.38461538       0 0.10157791 0.64481869 0.25360340
125 2.40384615       0 0.08327170 0.62665116 0.29007714
126 2.42307692       0 0.06829389 0.60393908 0.32776703
127 2.44230769       0 0.05664448 0.57725852 0.36609700
128 2.46153846       0 0.04832347 0.54718556 0.40449097
129 2.48076923       0 0.04333087 0.51429625 0.44237289
130 2.50000000       0 0.04166667 0.47916667 0.47916667
131 2.51923077       0 0.04333087 0.44237289 0.51429625
132 2.53846154       0 0.04832347 0.40449097 0.54718556
133 2.55769231       0 0.05664448 0.36609700 0.57725852
134 2.57692308       0 0.06829389 0.32776703 0.60393908
135 2.59615385       0 0.08327170 0.29007714 0.62665116
136 2.61538462       0 0.10157791 0.25360340 0.64481869
137 2.63461538       0 0.12321252 0.21892187 0.65786560
138 2.65384615       0 0.14817554 0.18660863 0.66521582
139 2.67307692       0 0.17646341 0.15723619 0.66630040
140 2.69230769       0 0.20785920 0.13116371 0.66097709
141 2.71153846       0 0.24181531 0.10841963 0.64976507
142 2.73076923       0 0.27775565 0.08900394 0.63324040
143 2.75000000       0 0.31510417 0.07291667 0.61197917
144 2.76923077       0 0.35328478 0.06015779 0.58655743
145 2.78846154       0 0.39172143 0.05072732 0.55755125
146 2.80769231       0 0.42983804 0.04462525 0.52553672
147 2.82692308       0 0.46705854 0.04185158 0.49108989
148 2.84615385       0 0.50280686 0.04240631 0.45478683
149 2.86538462       0 0.53650693 0.04628945 0.41720362
150 2.88461538       0 0.56758269 0.05350099 0.37891633
151 2.90384615       0 0.59545806 0.06404093 0.34050101
152 2.92307692       0 0.61955697 0.07790927 0.30253376
153 2.94230769       0 0.63930336 0.09510602 0.26559063
154 2.96153846       0 0.65412115 0.11563116 0.23024769
155 2.98076923       0 0.66343428 0.13948471 0.19708101
156 3.00000000       0 0.66666667 0.16666667 0.16666667
157 3.01923077       0 0.66343428 0.19708101 0.13948471
158 3.03846154       0 0.65412115 0.23024769 0.11563116
159 3.05769231       0 0.63930336 0.26559063 0.09510602
160 3.07692308       0 0.61955697 0.30253376 0.07790927
161 3.09615385       0 0.59545806 0.34050101 0.06404093
162 3.11538462       0 0.56758269 0.37891633 0.05350099
163 3.13461538       0 0.53650693 0.41720362 0.04628945
164 3.15384615       0 0.50280686 0.45478683 0.04240631
165 3.17307692       0 0.46705854 0.49108989 0.04185158
166 3.19230769       0 0.42983804 0.52553672 0.04462525
167 3.21153846       0 0.39172143 0.55755125 0.05072732
168 3.23076923       0 0.35328478 0.58655743 0.06015779
169 3.25000000       0 0.31510417 0.61197917 0.07291667
170 3.26923077       0 0.27775565 0.63324040 0.08900394
171 3.28846154       0 0.24181531 0.64976507 0.10841963
172 3.30769231       0 0.20785920 0.66097709 0.13116371
173 3.32692308       0 0.17646341 0.66630040 0.15723619
174 3.34615385       0 0.14817554 0.66521582 0.18660863
175 3.36538462       0 0.12321252 0.65786560 0.21892187
176 3.38461538       0 0.10157791 0.64481869 0.25360340
177 3.40384615       0 0.08327170 0.62665116 0.29007714
178 3.42307692       0 0.06829389 0.60393908 0.32776703
179 3.44230769       0 0.05664448 0.57725852 0.36609700
180 3.46153846       0 0.04832347 0.54718556 0.40449097
181 3.48076923       0 0.04333087 0.51429625 0.44237289
182 3.50000000       0 0.04166667 0.47916667 0.47916667
183 3.51923077       0 0.04333087 0.44237289 0.51429625
184 3.53846154       0 0.04832347 0.40449097 0.54718556
185 3.55769231       0 0.05664448 0.36609700 0.57725852
186 3.57692308       0 0.06829389 0.32776703 0.60393908
187 3.59615385       0 0.08327170 0.29007714 0.62665116
188 3.61538462       0 0.10157791 0.25360340 0.64481869
189 3.63461538       0 0.12321252 0.21892187 0.65786560
190 3.65384615       0 0.14817554 0.18660863 0.66521582
191 3.67307692       0 0.17646341 0.15723619 0.66630040
192 3.69230769       0 0.20785920 0.13116371 0.66097709
193 3.71153846       0 0.24181531 0.10841963 0.64976507
194 3.73076923       0 0.27775565 0.08900394 0.63324040
195 3.75000000       0 0.31510417 0.07291667 0.61197917
196 3.76923077       0 0.35328478 0.06015779 0.58655743
197 3.78846154       0 0.39172143 0.05072732 0.55755125
198 3.80769231       0 0.42983804 0.04462525 0.52553672
199 3.82692308       0 0.46705854 0.04185158 0.49108989
200 3.84615385       0 0.50280686 0.04240631 0.45478683
201 3.86538462       0 0.53650693 0.04628945 0.41720362
202 3.88461538       0 0.56758269 0.05350099 0.37891633
203 3.90384615       0 0.59545806 0.06404093 0.34050101
204 3.92307692       0 0.61955697 0.07790927 0.30253376
205 3.94230769       0 0.63930336 0.09510602 0.26559063
206 3.96153846       0 0.65412115 0.11563116 0.23024769
207 3.98076923       0 0.66343428 0.13948471 0.19708101
208 4.00000000       0 0.66666667 0.16666667 0.16666667
zero time, t0 = 0
parameter(s) unspecified
process model simulator, rprocess = 
function (xstart, times, params, ..., statenames = character(0), 
    paramnames = character(0), covarnames = character(0), zeronames = character(0), 
    tcovar, covar) 
{
    .Call(euler_model_simulator, func = efun, xstart = xstart, 
        times = times, params = params, dt = delta.t, method = 0L, 
        statenames = statenames, paramnames = paramnames, covarnames = covarnames, 
        zeronames = zeronames, tcovar = tcovar, covar = covar, 
        args = pairlist(...))
}
<environment: 0x18fb960>
process model density, dprocess = 
function (x, times, params, ..., statenames = character(0), paramnames = character(0), 
    covarnames = character(0), tcovar, covar, log = FALSE) 
{
    .Call(euler_model_density, func = efun, x = x, times = times, 
        params = params, statenames = statenames, paramnames = paramnames, 
        covarnames = covarnames, tcovar = tcovar, covar = covar, 
        log = log, args = pairlist(...))
}
<environment: 0x1872ef8>
measurement model simulator, rmeasure = 
function (x, t, params, covars, ...) 
{
    with(as.list(c(x, exp(params))), {
        rep <- round(rnorm(n = 1, mean = rho * cases, sd = sqrt(rho * 
            (1 - rho) * cases)))
        if (rep < 0) 
            rep <- 0
        c(reports = rep)
    })
}
measurement model density, dmeasure = 
function (y, x, t, params, log, covars, ...) 
{
    with(as.list(c(x, exp(params))), {
        if (y > 0) 
            f <- diff(pnorm(q = y + c(-0.5, 0.5), mean = rho * 
                cases, sd = sqrt(rho * (1 - rho) * cases), lower.tail = TRUE, 
                log.p = FALSE))
        else f <- pnorm(q = 0.5, mean = rho * cases, sd = sqrt(rho * 
            (1 - rho) * cases), lower.tail = TRUE, log.p = FALSE)
        if (log) 
            log(f)
        else f
    })
}
skeleton ( vectorfield ) = 
function (x, t, params, covars, ...) 
{
    xdot <- rep(0, length(x))
    params <- exp(params)
    with(as.list(c(x, params)), {
        beta <- exp(sum(log(c(beta1, beta2, beta3)) * covars))
        foi <- (iota + beta * I)/pop
        terms <- c(mu * pop, foi * S, mu * S, gamma * I, mu * 
            I, mu * R)
        xdot[1:4] <- c(terms[1] - terms[2] - terms[3], terms[2] - 
            terms[4] - terms[5], terms[4] - terms[6], terms[4])
        xdot
    })
}
initializer = 
function (params, t0, ...) 
{
    p <- exp(params)
    with(as.list(p), {
        fracs <- c(S.0, I.0, R.0)
        x0 <- c(round(pop * fracs/sum(fracs)), rep(0, 9))
        names(x0) <- c("S", "I", "R", "cases", "W", "B", "SI", 
            "SD", "IR", "ID", "RD", "dW")
        x0["cases"] <- gamma/52 * x0["I"]
        x0
    })
}
parameter transform function = 
function (params, ...) 
params
<environment: 0x1ab0e20>
parameter inverse transform function = 
function (params, ...) 
params
<environment: 0x1ab0e20>
> 
> set.seed(3049953)
> ## simulate from the model
> tic <- Sys.time()
> x <- simulate(po,params=log(params),nsim=3)
> toc <- Sys.time()
> print(toc-tic)
Time difference of 1.108709 secs
> 
> pdf(file='sir.pdf')
> 
> plot(x[[1]],variables=c("S","I","R","cases","W"))
> 
> t1 <- seq(0,4/52,by=1/52/25)
> X1 <- simulate(po,params=log(params),nsim=10,states=TRUE,obs=TRUE,times=t1)
> 
> t2 <- seq(0,2,by=1/52)
> X2 <- simulate(po,params=log(params),nsim=1,states=TRUE,obs=TRUE,times=t2)
> 
> t3 <- seq(0,20,by=1/52)
> tic <- Sys.time()
> X3 <- trajectory(po,params=log(params),times=t3,hmax=1/52)
> toc <- Sys.time()
> print(toc-tic)
Time difference of 1.442132 secs
> plot(t3,X3['I',1,],type='l')
> 
> f1 <- dprocess(
+                po,
+                x=X1$states[,,31:40],
+                times=t1[31:40],
+                params=matrix(
+                  log(params),
+                  nrow=length(params),
+                  ncol=10,
+                  dimnames=list(names(params),NULL)
+                  ),
+                log=TRUE
+                )
> print(apply(f1,1,sum),digits=4)
 [1] -41.29 -40.62 -58.44 -40.74 -48.97 -46.98 -40.59 -44.77 -49.61 -42.44
> 
> g1 <- dmeasure(
+                po,
+                y=rbind(reports=X1$obs[,7,]),
+                x=X1$states,
+                times=t1,
+                params=matrix(
+                  log(params),
+                  nrow=length(params),
+                  ncol=10,
+                  dimnames=list(names(params),NULL)
+                  ),
+                log=TRUE
+                )
> print(apply(g1,1,sum),digits=4)
 [1] -363.9 -400.0 -418.2 -387.1 -404.6 -417.2 -251.7 -440.1 -404.5 -416.1
> 
> h1 <- skeleton(
+                po,
+                x=X2$states[,1,55:70,drop=FALSE],
+                t=t2[55:70],
+                params=as.matrix(log(params))
+                )
> print(h1[c("S","I","R"),,],digits=4)
    [,1]     [,2]     [,3]   [,4]     [,5]   [,6]   [,7]   [,8]   [,9]  [,10]
S  39608  39770.1  39222.4  39000  38470.0  37635  36130  34844  33808  30538
I    243    246.8    415.5    519    722.8   1047   1628   2172   2649   4006
R -39852 -40019.5 -39639.0 -39520 -39191.5 -38682 -37758 -37016 -36456 -34544
   [,11]  [,12]  [,13]  [,14]  [,15]    [,16]
S  27082  20266  13528   2809  -8808 -26739.3
I   5473   8300  11076  15339  19697  25951.9
R -32554 -28565 -24604 -18148 -10889    787.2
> 
> ## now repeat using the compiled native codes built into the package
> data(euler.sir)
> po <- euler.sir
> 
> set.seed(3049953)
> ## simulate from the model
> tic <- Sys.time()
> x <- simulate(po,nsim=100)
> toc <- Sys.time()
> print(toc-tic)
Time difference of 1.197893 secs
> plot(x[[1]],variables=c("S","I","R","cases","W"))
> 
> t3 <- seq(0,20,by=1/52)
> tic <- Sys.time()
> X4 <- trajectory(po,times=t3,hmax=1/52)
> toc <- Sys.time()
> print(toc-tic)
Time difference of 0.07234192 secs
> plot(t3,X4['I',1,],type='l')
> 
> g2 <- dmeasure(
+                po,
+                y=rbind(reports=X1$obs[,7,]),
+                x=X1$states,
+                times=t1,
+                params=matrix(
+                  coef(po),
+                  nrow=length(params)+3,
+                  ncol=10,
+                  dimnames=list(names(coef(po)),NULL)
+                  ),
+                log=TRUE
+                )
> print(apply(g2,1,sum),digits=4)
 [1] -363.9 -400.0 -418.2 -387.1 -404.6 -417.2 -251.7 -440.1 -404.5 -416.1
> 
> h2 <- skeleton(
+                po,
+                x=X2$states[,1,55:70,drop=FALSE],
+                t=t2[55:70],
+                params=as.matrix(coef(po))
+                )
> print(h2[c("S","I","R"),,],digits=4)
    [,1]     [,2]     [,3]   [,4]     [,5]   [,6]   [,7]   [,8]   [,9]  [,10]
S  39608  39770.1  39222.4  39000  38470.0  37635  36130  34844  33808  30538
I    243    246.8    415.5    519    722.8   1047   1628   2172   2649   4006
R -39852 -40019.5 -39639.0 -39520 -39191.5 -38682 -37758 -37016 -36456 -34544
   [,11]  [,12]  [,13]  [,14]  [,15]    [,16]
S  27082  20266  13528   2809  -8808 -26739.3
I   5473   8300  11076  15339  19697  25951.9
R -32554 -28565 -24604 -18148 -10889    787.2
> 
> print(max(abs(g2-g1),na.rm=T),digits=4)
[1] 7.105e-15
> print(max(abs(h2-h1),na.rm=T),digits=4)
[1] 9.459e-11
> 
> states(po)[,1:2]
               [,1]          [,2]
S      4.531800e+04  4.511300e+04
I      2.038000e+03  2.020000e+03
R      2.052647e+06  2.052886e+06
cases  1.045000e+03  9.960000e+02
W     -2.334331e-01 -2.382536e-02
> time(po) <- seq(0,1,by=1/52)
> states(po)[,1:3]
      [,1]          [,2]          [,3]
S       NA  4.531800e+04  4.511300e+04
I       NA  2.038000e+03  2.020000e+03
R       NA  2.052647e+06  2.052886e+06
cases   NA  1.045000e+03  9.960000e+02
W       NA -2.334331e-01 -2.382536e-02
> states(simulate(po))[,1:3]
         [,1]         [,2]          [,3]
S       45500 4.526000e+04  4.506900e+04
I        2100 2.091000e+03  2.141000e+03
R     2052400 2.052645e+06  2.052811e+06
cases       0 1.013000e+03  9.660000e+02
W           0 9.854644e-03 -1.055328e-01
> 
> po <- window(euler.sir,start=1,end=2)
> plot(simulate(po))
> timezero(po)
[1] 0
> timezero(po)<-2*time(po)[1]-time(po)[2]
> plot(simulate(po))
> 
> dev.off()
null device 
          1 
> 
> 
