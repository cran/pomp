
R version 2.9.1 (2009-06-26)
Copyright (C) 2009 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
Loading required package: deSolve
Loading required package: subplex
Loading required package: mvtnorm
> 
> tbasis <- seq(0,25,by=1/52)
> basis <- periodic.bspline.basis(tbasis,nbasis=3)
> colnames(basis) <- paste("seas",1:3,sep='')
> 
> ## some parameters
> params <- c(
+             gamma=26,mu=0.02,iota=0.01,
+             beta1=1200,beta2=1800,beta3=600,
+             beta.sd=1e-3,
+             pop=2.1e6,
+             rho=0.6,
+             S.0=26/1200,I.0=0.001,R.0=1-0.001-26/1200
+             )
> 
> ## set up the pomp object
> ## the C codes "sir_euler_simulator" and "sir_euler_density" are included in the "examples" directory (file "sir.c")
> po <- pomp(
+            times=1/52*seq.int(length=4*52),
+            data=rbind(measles=numeric(52*4)),
+            t0=0,
+            tcovar=tbasis,
+            covar=basis,
+            delta.t=1/52/20,
+            zeronames=c("cases"),
+            step.fun=function(t,x,params,covars,delta.t,...) {
+              params <- exp(params)
+              with(
+                   as.list(c(x,params)),
+                   {
+                     beta <- exp(sum(log(c(beta1,beta2,beta3))*covars))
+                     beta.var <- beta.sd^2
+                     dW <- rgamma(n=1,shape=delta.t/beta.var,scale=beta.var)
+                     foi <- (iota+beta*I*dW/delta.t)/pop
+                     trans <- c(
+                                rpois(n=1,lambda=mu*pop*delta.t),
+                                reulermultinom(n=1,size=S,rate=c(foi,mu),dt=delta.t),
+                                reulermultinom(n=1,size=I,rate=c(gamma,mu),dt=delta.t),
+                                reulermultinom(n=1,size=R,rate=c(mu),dt=delta.t)
+                                )
+                     c(
+                       S=S+trans[1]-trans[2]-trans[3],
+                       I=I+trans[2]-trans[4]-trans[5],
+                       R=R+trans[4]-trans[6],
+                       cases=cases+trans[4],
+                       W=if (beta.sd>0) W+(dW-delta.t)/beta.sd else W,
+                       B=trans[1],
+                       SI=trans[2],
+                       SD=trans[3],
+                       IR=trans[4],
+                       ID=trans[5],
+                       RD=trans[6],
+                       dW=dW
+                       )
+                   }
+                   )
+            },
+            dens.fun=function(t1,t2,params,x1,x2,covars,...) {
+              params <- exp(params)
+              with(
+                   as.list(params),
+                   {
+                     dt <- t2-t1
+                     beta <- exp(sum(log(c(beta1,beta2,beta3))*covars))
+                     beta.var <- beta.sd^2
+                     dW <- x2['dW']
+                     foi <- (iota+beta*x1["I"]*dW/dt)/pop
+                     probs <- c(
+                                dpois(x=x2["B"],lambda=mu*pop*dt,log=T),
+                                deulermultinom(x=x2[c("SI","SD")],size=x1["S"],rate=c(foi,mu),dt=dt,log=T),
+                                deulermultinom(x=x2[c("IR","ID")],size=x1["I"],rate=c(gamma,mu),dt=dt,log=T),
+                                deulermultinom(x=x2["RD"],size=x1["R"],rate=c(mu),dt=dt,log=T),
+                                dgamma(x=dW,shape=dt/beta.var,scale=beta.var,log=T)
+                                )
+                     sum(probs)
+                   }
+                   )
+            },
+            skeleton.vectorfield=function(x,t,params,covars,...) {
+              xdot <- rep(0,length(x))
+              params <- exp(params)
+              with(
+                   as.list(c(x,params)),
+                   {
+                     beta <- exp(sum(log(c(beta1,beta2,beta3))*covars))
+                     foi <- (iota+beta*I)/pop
+                     terms <- c(
+                                mu*pop,
+                                foi*S,
+                                mu*S,
+                                gamma*I,
+                                mu*I,
+                                mu*R
+                                )
+                     xdot[1:4] <- c(
+                                    terms[1]-terms[2]-terms[3],
+                                    terms[2]-terms[4]-terms[5],
+                                    terms[4]-terms[6],
+                                    terms[4]
+                                    )
+                     xdot
+                   }
+                   )
+            },
+            rprocess=euler.simulate,
+            dprocess=onestep.density,
+            measurement.model=measles~binom(size=cases,prob=exp(rho)),
+            initializer=function(params,t0,...){
+              p <- exp(params)
+              with(
+                   as.list(p),
+                   {
+                     fracs <- c(S.0,I.0,R.0)
+                     x0 <- c(
+                             round(pop*fracs/sum(fracs)), # make sure the three compartments sum to 'pop' initially
+                             rep(0,9)	# zeros for 'cases', 'W', and the transition numbers
+                             )
+                     names(x0) <- c("S","I","R","cases","W","B","SI","SD","IR","ID","RD","dW")
+                     x0
+                   }
+                   )
+            }
+            )
> 
> show(po)
          time measles
1   0.01923077       0
2   0.03846154       0
3   0.05769231       0
4   0.07692308       0
5   0.09615385       0
6   0.11538462       0
7   0.13461538       0
8   0.15384615       0
9   0.17307692       0
10  0.19230769       0
11  0.21153846       0
12  0.23076923       0
13  0.25000000       0
14  0.26923077       0
15  0.28846154       0
16  0.30769231       0
17  0.32692308       0
18  0.34615385       0
19  0.36538462       0
20  0.38461538       0
21  0.40384615       0
22  0.42307692       0
23  0.44230769       0
24  0.46153846       0
25  0.48076923       0
26  0.50000000       0
27  0.51923077       0
28  0.53846154       0
29  0.55769231       0
30  0.57692308       0
31  0.59615385       0
32  0.61538462       0
33  0.63461538       0
34  0.65384615       0
35  0.67307692       0
36  0.69230769       0
37  0.71153846       0
38  0.73076923       0
39  0.75000000       0
40  0.76923077       0
41  0.78846154       0
42  0.80769231       0
43  0.82692308       0
44  0.84615385       0
45  0.86538462       0
46  0.88461538       0
47  0.90384615       0
48  0.92307692       0
49  0.94230769       0
50  0.96153846       0
51  0.98076923       0
52  1.00000000       0
53  1.01923077       0
54  1.03846154       0
55  1.05769231       0
56  1.07692308       0
57  1.09615385       0
58  1.11538462       0
59  1.13461538       0
60  1.15384615       0
61  1.17307692       0
62  1.19230769       0
63  1.21153846       0
64  1.23076923       0
65  1.25000000       0
66  1.26923077       0
67  1.28846154       0
68  1.30769231       0
69  1.32692308       0
70  1.34615385       0
71  1.36538462       0
72  1.38461538       0
73  1.40384615       0
74  1.42307692       0
75  1.44230769       0
76  1.46153846       0
77  1.48076923       0
78  1.50000000       0
79  1.51923077       0
80  1.53846154       0
81  1.55769231       0
82  1.57692308       0
83  1.59615385       0
84  1.61538462       0
85  1.63461538       0
86  1.65384615       0
87  1.67307692       0
88  1.69230769       0
89  1.71153846       0
90  1.73076923       0
91  1.75000000       0
92  1.76923077       0
93  1.78846154       0
94  1.80769231       0
95  1.82692308       0
96  1.84615385       0
97  1.86538462       0
98  1.88461538       0
99  1.90384615       0
100 1.92307692       0
101 1.94230769       0
102 1.96153846       0
103 1.98076923       0
104 2.00000000       0
105 2.01923077       0
106 2.03846154       0
107 2.05769231       0
108 2.07692308       0
109 2.09615385       0
110 2.11538462       0
111 2.13461538       0
112 2.15384615       0
113 2.17307692       0
114 2.19230769       0
115 2.21153846       0
116 2.23076923       0
117 2.25000000       0
118 2.26923077       0
119 2.28846154       0
120 2.30769231       0
121 2.32692308       0
122 2.34615385       0
123 2.36538462       0
124 2.38461538       0
125 2.40384615       0
126 2.42307692       0
127 2.44230769       0
128 2.46153846       0
129 2.48076923       0
130 2.50000000       0
131 2.51923077       0
132 2.53846154       0
133 2.55769231       0
134 2.57692308       0
135 2.59615385       0
136 2.61538462       0
137 2.63461538       0
138 2.65384615       0
139 2.67307692       0
140 2.69230769       0
141 2.71153846       0
142 2.73076923       0
143 2.75000000       0
144 2.76923077       0
145 2.78846154       0
146 2.80769231       0
147 2.82692308       0
148 2.84615385       0
149 2.86538462       0
150 2.88461538       0
151 2.90384615       0
152 2.92307692       0
153 2.94230769       0
154 2.96153846       0
155 2.98076923       0
156 3.00000000       0
157 3.01923077       0
158 3.03846154       0
159 3.05769231       0
160 3.07692308       0
161 3.09615385       0
162 3.11538462       0
163 3.13461538       0
164 3.15384615       0
165 3.17307692       0
166 3.19230769       0
167 3.21153846       0
168 3.23076923       0
169 3.25000000       0
170 3.26923077       0
171 3.28846154       0
172 3.30769231       0
173 3.32692308       0
174 3.34615385       0
175 3.36538462       0
176 3.38461538       0
177 3.40384615       0
178 3.42307692       0
179 3.44230769       0
180 3.46153846       0
181 3.48076923       0
182 3.50000000       0
183 3.51923077       0
184 3.53846154       0
185 3.55769231       0
186 3.57692308       0
187 3.59615385       0
188 3.61538462       0
189 3.63461538       0
190 3.65384615       0
191 3.67307692       0
192 3.69230769       0
193 3.71153846       0
194 3.73076923       0
195 3.75000000       0
196 3.76923077       0
197 3.78846154       0
198 3.80769231       0
199 3.82692308       0
200 3.84615385       0
201 3.86538462       0
202 3.88461538       0
203 3.90384615       0
204 3.92307692       0
205 3.94230769       0
206 3.96153846       0
207 3.98076923       0
208 4.00000000       0
zero time, t0 = 0
parameter(s) unspecified
process model simulator, rprocess = 
function (xstart, times, params, step.fun, delta.t, ..., statenames = character(0), 
    paramnames = character(0), covarnames = character(0), zeronames = character(0), 
    tcovar, covar, PACKAGE) 
{
    if (is.character(step.fun)) {
        efun <- try(getNativeSymbolInfo(step.fun, PACKAGE)$address, 
            silent = FALSE)
        if (inherits(efun, "try-error")) {
            stop("no symbol named ", step.fun, " in package ", 
                PACKAGE)
        }
    }
    else if (is.function(step.fun)) {
        if (!all(c("x", "t", "params", "delta.t", "...") %in% 
            names(formals(step.fun)))) 
            stop(sQuote("step.fun"), " must be a function of prototype ", 
                sQuote("step.fun(x,t,params,delta.t,...)"))
        efun <- step.fun
    }
    else {
        stop(sQuote("step.fun"), " must be either a function or the name of a compiled routine")
    }
    .Call(euler_model_simulator, func = efun, xstart = xstart, 
        times = times, params = params, dt = delta.t, method = 0L, 
        statenames = statenames, paramnames = paramnames, covarnames = covarnames, 
        zeronames = zeronames, tcovar = tcovar, covar = covar, 
        args = pairlist(...))
}
<environment: namespace:pomp>
process model density, dprocess = 
function (x, times, params, dens.fun, ..., statenames = character(0), 
    paramnames = character(0), covarnames = character(0), tcovar, 
    covar, log = FALSE, PACKAGE) 
{
    if (is.character(dens.fun)) {
        efun <- try(getNativeSymbolInfo(dens.fun, PACKAGE)$address, 
            silent = FALSE)
        if (inherits(efun, "try-error")) {
            stop("no symbol named ", dens.fun, " in package ", 
                PACKAGE)
        }
    }
    else if (is.function(dens.fun)) {
        if (!all(c("x1", "x2", "t1", "t2", "params", "...") %in% 
            names(formals(dens.fun)))) 
            stop(sQuote("dens.fun"), " must be a function of prototype ", 
                sQuote("dens.fun(x1,x2,t1,t2,params,...)"))
        efun <- dens.fun
    }
    else {
        stop(sQuote("dens.fun"), " must be either a function or the name of a compiled routine")
    }
    .Call(euler_model_density, efun, x, times, params, statenames, 
        paramnames, covarnames, tcovar, covar, log, args = pairlist(...))
}
<environment: namespace:pomp>
measurement model simulator, rmeasure = 
function (x, t, params, covars, ...) 
{
    y <- numeric(length = nobs)
    names(y) <- obsnames
    for (k in 1:nobs) {
        y[k] <- eval(rcalls[[k]], envir = as.list(c(x, params, 
            covars, t = t)))
    }
    y
}
<environment: 0x1203c28>
measurement model density, dmeasure = 
function (y, x, t, params, log, covars, ...) 
{
    f <- 0
    for (k in 1:nobs) {
        f <- f + eval(dcalls[[k]], envir = as.list(c(y, x, params, 
            covars, t = t)))
    }
    if (log) 
        f
    else exp(f)
}
<environment: 0x1203c28>
initializer = 
function (params, t0, ...) 
{
    p <- exp(params)
    with(as.list(p), {
        fracs <- c(S.0, I.0, R.0)
        x0 <- c(round(pop * fracs/sum(fracs)), rep(0, 9))
        names(x0) <- c("S", "I", "R", "cases", "W", "B", "SI", 
            "SD", "IR", "ID", "RD", "dW")
        x0
    })
}
userdata = 
$delta.t
[1] 0.0009615385

$zeronames
[1] "cases"

$step.fun
function (t, x, params, covars, delta.t, ...) 
{
    params <- exp(params)
    with(as.list(c(x, params)), {
        beta <- exp(sum(log(c(beta1, beta2, beta3)) * covars))
        beta.var <- beta.sd^2
        dW <- rgamma(n = 1, shape = delta.t/beta.var, scale = beta.var)
        foi <- (iota + beta * I * dW/delta.t)/pop
        trans <- c(rpois(n = 1, lambda = mu * pop * delta.t), 
            reulermultinom(n = 1, size = S, rate = c(foi, mu), 
                dt = delta.t), reulermultinom(n = 1, size = I, 
                rate = c(gamma, mu), dt = delta.t), reulermultinom(n = 1, 
                size = R, rate = c(mu), dt = delta.t))
        c(S = S + trans[1] - trans[2] - trans[3], I = I + trans[2] - 
            trans[4] - trans[5], R = R + trans[4] - trans[6], 
            cases = cases + trans[4], W = if (beta.sd > 0) W + 
                (dW - delta.t)/beta.sd else W, B = trans[1], 
            SI = trans[2], SD = trans[3], IR = trans[4], ID = trans[5], 
            RD = trans[6], dW = dW)
    })
}

$dens.fun
function (t1, t2, params, x1, x2, covars, ...) 
{
    params <- exp(params)
    with(as.list(params), {
        dt <- t2 - t1
        beta <- exp(sum(log(c(beta1, beta2, beta3)) * covars))
        beta.var <- beta.sd^2
        dW <- x2["dW"]
        foi <- (iota + beta * x1["I"] * dW/dt)/pop
        probs <- c(dpois(x = x2["B"], lambda = mu * pop * dt, 
            log = T), deulermultinom(x = x2[c("SI", "SD")], size = x1["S"], 
            rate = c(foi, mu), dt = dt, log = T), deulermultinom(x = x2[c("IR", 
            "ID")], size = x1["I"], rate = c(gamma, mu), dt = dt, 
            log = T), deulermultinom(x = x2["RD"], size = x1["R"], 
            rate = c(mu), dt = dt, log = T), dgamma(x = dW, shape = dt/beta.var, 
            scale = beta.var, log = T))
        sum(probs)
    })
}

> 
> set.seed(3049953)
> ## simulate from the model
> tic <- Sys.time()
> x <- simulate(po,params=log(params),nsim=3)
> toc <- Sys.time()
> print(toc-tic)
Time difference of 1.975832 secs
> 
> pdf(file='sir.pdf')
> 
> plot(x[[1]],variables=c("S","I","R","cases","W"))
> 
> t1 <- seq(0,4/52,by=1/52/25)
> X1 <- simulate(po,params=log(params),nsim=10,states=TRUE,obs=TRUE,times=t1)
> 
> t2 <- seq(0,2,by=1/52)
> X2 <- simulate(po,params=log(params),nsim=1,states=TRUE,obs=TRUE,times=t2)
> 
> t3 <- seq(0,20,by=1/52)
> tic <- Sys.time()
> X3 <- trajectory(po,params=log(params),times=t3,hmax=1/52)
> toc <- Sys.time()
> print(toc-tic)
Time difference of 4.516915 secs
> plot(t3,X3['I',1,],type='l')
> 
> f1 <- dprocess(
+                po,
+                x=X1$states[,,31:40],
+                times=t1[31:40],
+                params=matrix(
+                  log(params),
+                  nrow=length(params),
+                  ncol=10,
+                  dimnames=list(names(params),NULL)
+                  ),
+                log=TRUE
+                )
> print(apply(f1,1,sum),digits=4)
 [1] -51.57 -43.19 -50.14 -39.65 -41.63 -49.34 -39.60 -48.19 -42.60 -48.26
> 
> g1 <- dmeasure(
+                po,
+                y=rbind(measles=X1$obs[,7,]),
+                x=X1$states,
+                times=t1,
+                params=matrix(
+                  log(params),
+                  nrow=length(params),
+                  ncol=10,
+                  dimnames=list(names(params),NULL)
+                  ),
+                log=TRUE
+                )
> print(apply(g1,1,sum),digits=4)
 [1]   -Inf   -Inf   -Inf   -Inf   -Inf   -Inf -263.6 -408.1   -Inf -468.1
> 
> h1 <- skeleton(
+                po,
+                x=X2$states[,1,55:70,drop=FALSE],
+                t=t2[55:70],
+                params=as.matrix(log(params))
+                )
> print(h1[c("S","I","R"),,],digits=4)
      [,1]     [,2]     [,3]     [,4]     [,5]   [,6]   [,7]   [,8]   [,9]
S  39362.0  39111.6  39195.1  38583.3  38374.5  36367  34769  33057  29765
I    272.3    376.1    407.8    615.6    731.6   1423   2046   2755   4083
R -39640.5 -39495.0 -39609.9 -39205.0 -39112.3 -37796 -36819 -35816 -33852
   [,10]  [,11]  [,12]    [,13]  [,14]  [,15]  [,16]
S  24577  17622  11393    319.5 -14707 -33518 -57305
I   6165   8975  11503  15834.2  21418  27852  34849
R -30746 -26601 -22900 -16156.5  -6714   5662  22453
> 
> data(euler.sir)
> 
> show(euler.sir)
          time measles     S    I       R cases           W  B  SI SD  IR ID RD
1   0.01923077     616 45318 2038 2052647  1045 -0.23343314 52  49  0  58  0 40
2   0.03846154     626 45113 2020 2052886   996 -0.02382536 52  57  1  52  0 35
3   0.05769231     559 44915 2065 2053068   970  0.14783667 38  58  1  64  0 47
4   0.07692308     612 44614 2152 2053280  1010  0.05182453 54  61  0  47  0 33
5   0.09615385     673 44274 2184 2053652  1091 -0.02306256 31  52  1  56  0 25
6   0.11538462     649 43794 2336 2053982  1106  0.21577036 43  62  0  56  0 48
7   0.13461538     667 43340 2441 2054340  1159  0.17847926 35  65  1  68  0 45
8   0.15384615     744 42779 2620 2054753  1229  0.10016846 44  74  1  65  0 42
9   0.17307692     823 41977 2830 2055329  1359 -0.03593619 35  76  0  73  0 47
10  0.19230769     852 41143 3010 2055983  1446 -0.04214926 41  88  0  59  0 32
11  0.21153846     894 40227 3188 2056683  1525  0.11057318 41  77  0  72  0 34
12  0.23076923    1011 39309 3273 2057514  1651  0.03682855 51  84  1 110  0 48
13  0.25000000     983 38353 3384 2058391  1659  0.11847457 52  64  4  84  0 34
14  0.26923077    1036 37422 3447 2059232  1674  0.18459661 44  88  1  81  0 54
15  0.28846154     998 36553 3422 2060082  1682 -0.06696936 44 102  1  86  1 42
16  0.30769231    1011 35750 3356 2060990  1702  0.15311053 38  82  0  84  0 45
17  0.32692308     983 35094 3215 2061847  1621  0.09218384 42  83  1  88  0 33
18  0.34615385     934 34506 3029 2062569  1569  0.29357440 48  77  0  76  0 46
19  0.36538462     833 34060 2825 2063272  1430  0.15543085 41  73  1  73  0 37
20  0.38461538     774 33758 2609 2063780  1328  0.28027118 34  68  2  61  0 41
21  0.40384615     752 33545 2362 2064250  1249  0.31715722 33  40  1  67  0 33
22  0.42307692     670 33457 2114 2064583  1131  0.43797614 38  42  1  56  0 47
23  0.44230769     595 33565 1875 2064745   978  0.27351520 48  32  1  44  0 40
24  0.46153846     528 33695 1658 2064816   874  0.33919388 44  28  0  36  0 37
25  0.48076923     473 33878 1427 2064830   792  0.33973801 35  30  0  29  0 24
26  0.50000000     429 34186 1245 2064667   667  0.41309774 27  24  1  30  0 51
27  0.51923077     322 34643 1036 2064400   545  0.32707592 52  15  0  29  0 39
28  0.53846154     277 35180  873 2064053   451  0.19646192 49  10  2  21  0 37
29  0.55769231     224 35706  735 2063666   393  0.18991544 31  18  0  24  0 40
30  0.57692308     194 36299  612 2063213   339  0.12573803 34   8  1  12  0 32
31  0.59615385     168 36893  526 2062654   278  0.13981543 30   2  0  10  0 45
32  0.61538462     159 37480  438 2062102   247  0.17438300 32   6  1   9  0 37
33  0.63461538     102 38095  375 2061498   172  0.23967634 39   6  0  10  0 47
34  0.65384615     136 38799  284 2060858   194  0.13755786 51   2  3   7  0 44
35  0.67307692      74 39525  218 2060206   123  0.08037701 37   1  0   8  0 41
36  0.69230769      53 40238  197 2059447    87  0.22075061 28   3  0   5  0 30
37  0.71153846      62 41001  151 2058782    96  0.11658598 52   2  1   5  0 41
38  0.73076923      41 41726  115 2058026    73  0.03575223 40   2  2   3  0 41
39  0.75000000      39 42523   84 2057281    58  0.13233301 45   2  0   4  0 41
40  0.76923077      12 43278   90 2056507    26 -0.06742852 50   4  0   0  0 38
41  0.78846154      25 44091   82 2055718    37 -0.20462744 36   2  0   2  0 32
42  0.80769231      31 44835   65 2054971    41 -0.22748932 28   1  1   3  0 42
43  0.82692308      17 45640   65 2054157    23 -0.44995890 38   1  0   0  0 52
44  0.84615385      18 46357   59 2053406    30 -0.40279498 33   1  1   1  0 30
45  0.86538462      15 47127   44 2052651    28 -0.47959030 39   1  1   0  0 26
46  0.88461538      13 47926   35 2051866    20 -0.68189209 38   1  0   1  0 38
47  0.90384615      11 48715   34 2051065    14 -0.63900133 40   1  0   0  0 36
48  0.92307692       9 49525   36 2050278    16 -0.63994901 30   1  1   0  0 40
49  0.94230769      13 50312   40 2049464    18 -0.63032479 33   1  1   0  0 29
50  0.96153846      11 51049   42 2048682    18 -0.47608654 38   0  0   2  0 51
51  0.98076923      10 51808   51 2047907    17 -0.39053790 41   2  1   0  0 31
52  1.00000000      17 52616   50 2047135    28 -0.24811016 46   4  1   0  0 38
53  1.01923077      14 53359   54 2046395    25 -0.14548526 35   0  2   1  0 31
54  1.03846154      19 54107   56 2045607    32 -0.33061880 39   5  2   2  0 43
55  1.05769231      15 54892   68 2044873    26 -0.40793381 36   1  0   0  0 40
56  1.07692308      26 55639   66 2044097    40 -0.43656551 32   4  1   3  0 28
57  1.09615385      26 56329   83 2043362    38 -0.32970344 29   5  3   3  0 37
58  1.11538462      24 57004   98 2042570    48 -0.27780751 30   0  0   3  0 40
59  1.13461538      34 57682  110 2041869    67 -0.49094954 42   4  3   5  0 35
60  1.15384615      45 58350  127 2041190    69 -0.68013808 40   8  1   3  0 27
61  1.17307692      45 59013  179 2040516    74 -0.78779956 44   8  1   3  0 39
62  1.19230769      56 59654  212 2039851   114 -0.78396548 36   8  1   9  0 40
63  1.21153846      86 60190  280 2039247   132 -0.68717315 44   8  1  11  0 47
64  1.23076923      75 60654  415 2038599   138 -0.58816451 41  11  3  11  0 45
65  1.25000000     157 61018  605 2038067   252 -0.52871848 39  30  3  19  0 33
66  1.26923077     180 61263  832 2037579   323 -0.59846996 42  31  1  19  0 42
67  1.28846154     287 61313 1130 2037243   487 -0.56289492 40  48  0  33  0 39
68  1.30769231     409 61030 1512 2037102   668 -0.47529347 41  67  2  38  0 45
69  1.32692308     513 60449 1992 2037243   883 -0.55577105 45  85  0  61  0 32
70  1.34615385     663 59620 2536 2037529  1111 -0.40009198 43  97  1  66  0 41
71  1.36538462     845 58297 3230 2038176  1411 -0.51354479 36 116  2  69  0 48
72  1.38461538    1041 56553 4003 2039123  1733 -0.47004141 36 128  0 109  0 39
73  1.40384615    1286 54484 4693 2040521  2170 -0.32503552 41 139  1 119  0 38
74  1.42307692    1489 52278 5178 2042219  2487 -0.28972645 36 145  1 135  1 45
75  1.44230769    1538 50197 5449 2043989  2578 -0.42048560 58 136  2 111  0 44
76  1.46153846    1610 48134 5554 2045921  2753 -0.34909517 43 143  0 132  0 48
77  1.48076923    1657 46152 5520 2047877  2742 -0.26218412 43 141  1 156  0 37
78  1.50000000    1551 44573 5219 2049718  2654 -0.17463656 38 121  0 121  0 48
79  1.51923077    1533 43303 4767 2051430  2541  0.13498494 38  87  2 127  0 50
80  1.53846154    1304 42355 4346 2052796  2147 -0.01211920 28  78  0 115  0 42
81  1.55769231    1145 41697 3783 2054086  2010  0.03293035 42  66  1  91  0 35
82  1.57692308    1016 41323 3247 2054925  1686 -0.25498958 43  40  3  73  0 32
83  1.59615385     908 41099 2736 2055644  1509 -0.34409660 37  48  1  76  0 30
84  1.61538462     760 41126 2214 2056131  1264 -0.52666076 41  35  0  65  0 37
85  1.63461538     599 41234 1848 2056368  1021 -0.30731247 32  33  1  43  0 43
86  1.65384615     449 41544 1555 2056356   780 -0.32200354 51  22  0  35  0 43
87  1.67307692     388 41874 1317 2056252   693 -0.37403780 42  18  2  37  0 39
88  1.69230769     387 42277 1119 2056078   635 -0.22976211 51  17  0  28  0 40
89  1.71153846     292 42763  962 2055756   491 -0.21560701 37  14  0  21  0 44
90  1.73076923     263 43316  794 2055383   430 -0.14208254 47  11  0  19  0 43
91  1.75000000     224 43875  687 2054998   364 -0.20035037 49  14  1  26  0 37
92  1.76923077     180 44466  602 2054515   299 -0.18466700 47  12  1  12  0 32
93  1.78846154     160 45028  505 2054032   282 -0.22000195 43  13  0   9  0 42
94  1.80769231     138 45640  452 2053505   234 -0.12075892 48   8  1  12  0 43
95  1.82692308     118 46295  397 2052875   190 -0.23403658 36   4  0   9  0 45
96  1.84615385     106 46928  351 2052295   190 -0.28140298 42   7  1  10  0 35
97  1.86538462     104 47621  310 2051670   172 -0.36579931 41   8  1   8  0 45
98  1.88461538      88 48233  277 2051068   149 -0.40558561 55   3  0  10  0 40
99  1.90384615      83 48864  263 2050382   129 -0.41035027 37   6  0   6  0 37
100 1.92307692      92 49476  241 2049738   139 -0.48169108 48   2  2   8  0 38
101 1.94230769      72 50202  239 2049095   121 -0.53959622 49   5  2   7  0 42
102 1.96153846      78 50900  234 2048446   132 -0.60648214 29   8  0   8  0 38
103 1.98076923      59 51525  248 2047732   115 -0.66705505 48   7  4   6  0 41
104 2.00000000      75 52210  242 2047067   127 -0.60053175 43   8  1   5  0 38
105 2.01923077      70 52826  265 2046435   120 -0.50431053 32   8  3   8  0 36
106 2.03846154     101 53472  285 2045796   149 -0.25586265 43   7  0  15  0 41
107 2.05769231      82 54114  313 2045164   138 -0.37868239 36  10  0   3  0 40
108 2.07692308      88 54694  365 2044506   161 -0.53519436 48  12  0   7  0 36
109 2.09615385     126 55220  433 2043890   189 -0.49626709 47  13  2   9  0 52
110 2.11538462     162 55711  516 2043365   237 -0.41789549 36  21  2  14  0 34
111 2.13461538     159 56137  641 2042834   262 -0.46829412 44  20  1  17  0 31
112 2.15384615     210 56463  773 2042443   341 -0.74613620 40  31  3  25  0 47
113 2.17307692     250 56554 1034 2042097   416 -0.53641459 48  41  2  21  0 31
114 2.19230769     339 56565 1246 2041915   560 -0.86950817 46  32  3  31  0 34
115 2.21153846     436 56307 1563 2041881   731 -0.79115329 41  50  1  40  0 48
116 2.23076923     512 55862 1914 2041982   880 -0.75925161 36  87  1  45  0 51
117 2.25000000     648 55046 2417 2042323  1110 -0.71871132 51  94  0  72  0 33
118 2.26923077     840 53946 2947 2042866  1346 -0.73518670 40  95  1  69  0 40
119 2.28846154     984 52425 3592 2043723  1659 -0.68792582 46 120  2  97  0 41
120 2.30769231    1132 50522 4398 2044855  1928 -0.57911984 46 151  0  99  0 47
121 2.32692308    1404 48192 5179 2046388  2349 -0.54770487 47 171  0 115  0 43
122 2.34615385    1623 45826 5696 2048282  2682 -0.38512822 46 161  1 142  0 40
123 2.36538462    1762 43300 6106 2050356  2912 -0.41541495 44 148  0 157  0 48
124 2.38461538    1787 40794 6395 2052555  2985 -0.11872976 42 169  0 135  0 41
125 2.40384615    1906 38708 6136 2054859  3105 -0.38217946 33 165  1 122  0 42
126 2.42307692    1801 36763 5929 2057024  2938 -0.37554258 34 137  0 140  0 28
127 2.44230769    1676 35323 5347 2059032  2787 -0.56057212 44  87  0 122  0 37
128 2.46153846    1506 34302 4688 2060756  2511 -0.69205985 42  93  0 122  0 51
129 2.48076923    1282 33605 4035 2062122  2144 -1.00878235 43  68  1  87  0 34
130 2.50000000    1129 33106 3484 2063114  1808 -0.89239531 39  51  0  83  0 36
131 2.51923077     919 32907 2838 2063910  1585 -0.79888960 42  43  0  76  0 44
132 2.53846154     775 32884 2421 2064393  1273 -0.47039221 52  44  0  53  0 34
133 2.55769231     673 33059 1950 2064727  1126 -0.42992121 31  37  0  60  0 43
134 2.57692308     534 33343 1577 2064769   889 -0.14340333 46  20  0  42  0 37
135 2.59615385     414 33837 1232 2064669   712 -0.37955547 42  14  0  41  0 44
136 2.61538462     303 34335 1000 2064440   535 -0.51596820 41  12  1  20  0 35
137 2.63461538     259 34877  805 2064072   434 -0.45075394 48  10  0  22  0 31
138 2.65384615     207 35476  674 2063650   328 -0.37712635 43  18  1  19  0 29
139 2.67307692     172 36087  577 2063209   282 -0.27194398 43   8  0  14  0 29
140 2.69230769     158 36775  474 2062694   250 -0.23055234 40   8  0  11  0 35
141 2.71153846     131 37407  376 2062131   218 -0.13284405 48   1  1  10  0 33
142 2.73076923     108 38109  291 2061485   168 -0.13016837 44   4  1  10  0 53
143 2.75000000      74 38848  231 2060820   130 -0.03313058 42   3  1   5  0 39
144 2.76923077      61 39576  200 2060156   108  0.05626756 41   4  0   5  0 46
145 2.78846154      61 40291  159 2059474    97 -0.04637448 43   5  3   3  0 28
146 2.80769231      38 41047  122 2058744    69 -0.07579954 41   3  0   3  0 50
147 2.82692308      41 41773   94 2058024    61 -0.12698925 30   1  2   1  0 30
148 2.84615385      28 42519   73 2057308    50  0.01120443 42   1  1   1  0 36
149 2.86538462      21 43245   77 2056547    33 -0.11584266 39   3  2   2  0 35
150 2.88461538      17 44001   66 2055736    34  0.05695438 50   2  3   2  0 42
151 2.90384615      18 44800   59 2055009    31 -0.21614297 47   0  0   0  0 35
152 2.92307692      12 45586   50 2054244    25 -0.21752992 47   1  0   1  0 28
153 2.94230769      22 46344   48 2053454    29 -0.36255244 45   2  0   0  0 40
154 2.96153846      16 47095   64 2052655    20 -0.21495324 35   3  1   2  0 45
155 2.98076923      12 47827   67 2051903    24 -0.23076567 38   2  0   2  0 39
156 3.00000000      21 48579   58 2051148    36 -0.30096705 35   2  0   3  0 38
157 3.01923077      18 49368   79 2050415    25 -0.31679543 46   2  3   2  0 30
158 3.03846154      16 50168   79 2049673    41 -0.32855840 49   3  1   1  0 37
159 3.05769231      26 50938   95 2048927    35 -0.16947359 54   1  0   0  0 42
160 3.07692308      33 51634  110 2048179    48 -0.25314992 25   6  0   0  0 42
161 3.09615385      35 52342  144 2047449    56 -0.16832927 47   5  1   1  0 34
162 3.11538462      47 52993  191 2046699    75 -0.10633347 43   4  2   7  0 43
163 3.13461538      62 53627  224 2045984   106 -0.03011091 42   6  1   7  0 44
164 3.15384615      76 54225  290 2045308   124 -0.09860972 46  13  1  12  0 45
165 3.17307692      93 54916  308 2044699   153 -0.20629477 53  15  0  12  0 42
166 3.19230769     110 55440  392 2044107   186 -0.17936013 45  17  3  17  0 36
167 3.21153846     127 55856  540 2043524   213 -0.26763894 36  20  0  14  0 29
168 3.23076923     188 56151  705 2043076   323 -0.28128154 43  24  0  21  0 38
169 3.25000000     233 56380  903 2042671   381 -0.49543629 42  42  2  24  0 41
170 3.26923077     296 56390 1180 2042346   500 -0.43261770 40  45  2  26  0 39
171 3.28846154     363 56204 1552 2042175   603 -0.41396755 36  57  0  45  0 36
172 3.30769231     501 55597 2052 2042221   876 -0.19202062 36  71  1  49  0 35
173 3.32692308     703 54769 2517 2042580  1132 -0.06674026 38  71  2  62  0 38
174 3.34615385     823 53759 2901 2043224  1402 -0.07753205 34  77  0  88  0 33
175 3.36538462     937 52333 3475 2044065  1618 -0.17389574 41 125  0  94  0 43
176 3.38461538    1041 50844 4030 2045060  1785 -0.05946204 52 116  0 107  0 44
177 3.40384615    1276 49136 4415 2046354  2105  0.08868371 47 101  0 107  0 41
178 3.42307692    1318 47266 4767 2047802  2237  0.04581370 41 114  0 126  0 36
179 3.44230769    1459 45563 4822 2049488  2439  0.04558455 52 123  1 116  0 30
180 3.46153846    1416 44020 4765 2051032  2328 -0.09622162 37 121  1 116  0 30
181 3.48076923    1412 42777 4501 2052610  2321 -0.04195975 52  96  1 117  0 32
182 3.50000000    1290 41893 4048 2053898  2111 -0.24125215 28  72  0  87  0 38
183 3.51923077    1138 41189 3694 2054997  1884 -0.46439660 44  66  4 105  0 32
184 3.53846154    1005 40670 3323 2055868  1702 -0.46665777 44  56  2  65  0 49
185 3.55769231     912 40349 2882 2056570  1532 -0.27432510 49  51  1  50  0 38
186 3.57692308     772 40269 2449 2057099  1300 -0.15259020 41  38  2  51  0 31
187 3.59615385     641 40293 2084 2057419  1093 -0.27250728 39  28  1  49  0 45
188 3.61538462     611 40482 1683 2057583   993 -0.15480744 32  34  1  40  0 47
189 3.63461538     465 40815 1377 2057610   781 -0.17064520 44  16  0  39  0 40
190 3.65384615     369 41168 1158 2057430   605 -0.03632630 36  16  0  29  0 53
191 3.67307692     316 41622  959 2057180   516 -0.36638059 36  16  0  29  0 38
192 3.69230769     258 42122  801 2056816   441 -0.38660773 36   8  0  18  1 48
193 3.71153846     207 42636  692 2056417   358 -0.35902255 33  11  2  18  0 47
194 3.73076923     166 43180  594 2055980   306 -0.43001457 34  13  2   6  0 31
195 3.75000000     157 43784  528 2055414   258 -0.52847499 48  10  1  14  0 51
196 3.76923077     138 44378  459 2054859   246 -0.50142139 40   7  1  13  0 35
197 3.78846154     123 44960  413 2054276   202 -0.50365200 36  13  1   5  0 41
198 3.80769231      99 45624  363 2053633   183 -0.54983261 34   4  0   7  0 56
199 3.82692308     122 46326  315 2053042   183 -0.48997484 44   6  2   7  0 48
200 3.84615385      95 47022  286 2052393   153 -0.22344021 52   9  0   5  0 40
201 3.86538462      82 47728  249 2051738   141 -0.16428501 39   4  0   6  0 49
202 3.88461538      65 48461  225 2051069   119 -0.12089260 43   2  1   5  0 32
203 3.90384615      78 49094  208 2050407   112  0.13946829 39   8  1   6  0 43
204 3.92307692      61 49782  211 2049715    95  0.11656350 40   1  0   4  0 38
205 3.94230769      55 50511  188 2049046   114  0.32386826 36   7  0   3  0 43
206 3.96153846      55 51205  182 2048347    91  0.10961022 46   3  1   4  0 33
207 3.98076923      57 51909  175 2047656   106 -0.18524388 34   2  0   3  0 30
208 4.00000000      52 52613  185 2046957    83 -0.01665094 39  10  3   6  0 42
              dW
1   0.0009808045
2   0.0009651218
3   0.0009633687
4   0.0009888417
5   0.0008945219
6   0.0009692798
7   0.0009865718
8   0.0009455997
9   0.0009450692
10  0.0009506453
11  0.0009729337
12  0.0009546012
13  0.0009234227
14  0.0009635860
15  0.0009690522
16  0.0009791580
17  0.0009630156
18  0.0009371565
19  0.0009768921
20  0.0009518540
21  0.0009842235
22  0.0009272843
23  0.0009371753
24  0.0009678474
25  0.0009901625
26  0.0010108710
27  0.0009292319
28  0.0009495679
29  0.0010171763
30  0.0009353945
31  0.0010210576
32  0.0009548490
33  0.0009091005
34  0.0010002345
35  0.0009593262
36  0.0009581475
37  0.0009847069
38  0.0009785277
39  0.0009704915
40  0.0010025880
41  0.0009561398
42  0.0009336905
43  0.0009774080
44  0.0009905615
45  0.0009471725
46  0.0009253302
47  0.0009689640
48  0.0009798393
49  0.0009693972
50  0.0009697492
51  0.0009843022
52  0.0009652588
53  0.0010027777
54  0.0009741069
55  0.0009379703
56  0.0009766894
57  0.0009317785
58  0.0009086844
59  0.0009180124
60  0.0009665000
61  0.0009312094
62  0.0009887848
63  0.0009920118
64  0.0009264118
65  0.0009665373
66  0.0009571446
67  0.0009466199
68  0.0009224078
69  0.0009695757
70  0.0009431469
71  0.0009964541
72  0.0009626332
73  0.0009853274
74  0.0009294462
75  0.0009950751
76  0.0009482290
77  0.0009882061
78  0.0010159754
79  0.0009626128
80  0.0009806523
81  0.0009708373
82  0.0009430965
83  0.0009559305
84  0.0010027567
85  0.0009454758
86  0.0009605119
87  0.0009363719
88  0.0009783520
89  0.0009966893
90  0.0009681242
91  0.0009238420
92  0.0009310854
93  0.0009935856
94  0.0009134352
95  0.0009332625
96  0.0009275251
97  0.0009380951
98  0.0009560634
99  0.0009387063
100 0.0009719664
101 0.0010208573
102 0.0009372322
103 0.0009467324
104 0.0009609206
105 0.0009258179
106 0.0010146917
107 0.0009523018
108 0.0010148070
109 0.0009597341
110 0.0009696079
111 0.0009797361
112 0.0009416570
113 0.0009900463
114 0.0009153607
115 0.0009860142
116 0.0010183712
117 0.0009879680
118 0.0009365255
119 0.0010112844
120 0.0009646654
121 0.0009912751
122 0.0009476591
123 0.0009048081
124 0.0010000246
125 0.0009569230
126 0.0009899893
127 0.0009866140
128 0.0009921348
129 0.0009581787
130 0.0009695778
131 0.0009799738
132 0.0009543363
133 0.0009382147
134 0.0009881052
135 0.0009635240
136 0.0009144239
137 0.0010139121
138 0.0009819798
139 0.0009592498
140 0.0009453458
141 0.0009472290
142 0.0009485828
143 0.0009861457
144 0.0009532640
145 0.0009978190
146 0.0008958878
147 0.0009175115
148 0.0009446781
149 0.0010012956
150 0.0010126549
151 0.0009382173
152 0.0009115051
153 0.0010075098
154 0.0009969288
155 0.0009193865
156 0.0009527989
157 0.0009875404
158 0.0009231364
159 0.0009630226
160 0.0009598053
161 0.0009871246
162 0.0009374579
163 0.0009901430
164 0.0009156888
165 0.0008826726
166 0.0009169830
167 0.0009299004
168 0.0009735569
169 0.0009920611
170 0.0010032529
171 0.0009574848
172 0.0010175528
173 0.0009271451
174 0.0009471472
175 0.0009645872
176 0.0009986579
177 0.0009337608
178 0.0009249310
179 0.0009396041
180 0.0010080659
181 0.0009234233
182 0.0009632646
183 0.0009669166
184 0.0009705099
185 0.0009862381
186 0.0009481664
187 0.0009575628
188 0.0009857152
189 0.0009925188
190 0.0010205457
191 0.0009220123
192 0.0009786070
193 0.0009736376
194 0.0009515690
195 0.0009461855
196 0.0009905853
197 0.0009572743
198 0.0009763753
199 0.0010142120
200 0.0009906583
201 0.0010353077
202 0.0009319978
203 0.0009492235
204 0.0009998682
205 0.0010208930
206 0.0009460423
207 0.0008683786
208 0.0010384932
zero time, t0 = 0
parameter(s):
      gamma          mu        iota       beta1       beta2       beta3 
 3.25809654 -3.91202301 -4.60517019  7.09007684  7.49554194  6.39692966 
    beta.sd         pop         rho         S.0         I.0         R.0 
-6.90775528 14.55744790 -0.51082562 -3.83198030 -6.90775528 -0.02292750 
process model simulator, rprocess = 
function (xstart, times, params, step.fun, delta.t, ..., statenames = character(0), 
    paramnames = character(0), covarnames = character(0), zeronames = character(0), 
    tcovar, covar, PACKAGE) 
{
    if (is.character(step.fun)) {
        efun <- try(getNativeSymbolInfo(step.fun, PACKAGE)$address, 
            silent = FALSE)
        if (inherits(efun, "try-error")) {
            stop("no symbol named ", step.fun, " in package ", 
                PACKAGE)
        }
    }
    else if (is.function(step.fun)) {
        if (!all(c("x", "t", "params", "delta.t", "...") %in% 
            names(formals(step.fun)))) 
            stop(sQuote("step.fun"), " must be a function of prototype ", 
                sQuote("step.fun(x,t,params,delta.t,...)"))
        efun <- step.fun
    }
    else {
        stop(sQuote("step.fun"), " must be either a function or the name of a compiled routine")
    }
    .Call(euler_model_simulator, func = efun, xstart = xstart, 
        times = times, params = params, dt = delta.t, method = 0L, 
        statenames = statenames, paramnames = paramnames, covarnames = covarnames, 
        zeronames = zeronames, tcovar = tcovar, covar = covar, 
        args = pairlist(...))
}
<environment: namespace:pomp>
process model density, dprocess = 
function (x, times, params, dens.fun, ..., statenames = character(0), 
    paramnames = character(0), covarnames = character(0), tcovar, 
    covar, log = FALSE, PACKAGE) 
{
    if (is.character(dens.fun)) {
        efun <- try(getNativeSymbolInfo(dens.fun, PACKAGE)$address, 
            silent = FALSE)
        if (inherits(efun, "try-error")) {
            stop("no symbol named ", dens.fun, " in package ", 
                PACKAGE)
        }
    }
    else if (is.function(dens.fun)) {
        if (!all(c("x1", "x2", "t1", "t2", "params", "...") %in% 
            names(formals(dens.fun)))) 
            stop(sQuote("dens.fun"), " must be a function of prototype ", 
                sQuote("dens.fun(x1,x2,t1,t2,params,...)"))
        efun <- dens.fun
    }
    else {
        stop(sQuote("dens.fun"), " must be either a function or the name of a compiled routine")
    }
    .Call(euler_model_density, efun, x, times, params, statenames, 
        paramnames, covarnames, tcovar, covar, log, args = pairlist(...))
}
<environment: namespace:pomp>
measurement model simulator, rmeasure = 
native function, 'binom_rmeasure', PACKAGE = 'pomp'
measurement model density, dmeasure = 
native function, 'binom_dmeasure', PACKAGE = 'pomp'
initializer = 
function (params, t0, comp.names, ...) 
{
    p <- exp(params)
    snames <- c("S", "I", "R", "cases", "W", "B", "SI", "SD", 
        "IR", "ID", "RD", "dW")
    fracs <- p[paste(comp.names, "0", sep = ".")]
    x0 <- numeric(length(snames))
    names(x0) <- snames
    x0[comp.names] <- round(p["pop"] * fracs/sum(fracs))
    x0
}
userdata = 
$delta.t
[1] 0.0009615385

$zeronames
[1] "cases"

$comp.names
[1] "S" "I" "R"

$step.fun
[1] "sir_euler_simulator"

$dens.fun
[1] "sir_euler_density"

> 
> set.seed(3049953)
> ## simulate from the model
> tic <- Sys.time()
> x <- simulate(euler.sir,nsim=100)
> toc <- Sys.time()
> print(toc-tic)
Time difference of 1.300607 secs
> plot(x[[1]],variables=c("S","I","R","cases","W"))
> 
> t3 <- seq(0,20,by=1/52)
> tic <- Sys.time()
> X4 <- trajectory(euler.sir,times=t3,hmax=1/52)
> toc <- Sys.time()
> print(toc-tic)
Time difference of 3.551238 secs
> plot(t3,X4['I',1,],type='l')
> 
> f2 <- dprocess(
+                euler.sir,
+                x=X1$states[,,31:40],
+                times=t1[31:40],
+                params=matrix(
+                  log(params),
+                  nrow=length(params),
+                  ncol=10,
+                  dimnames=list(names(params),NULL)
+                  ),
+                log=TRUE
+                )
> print(apply(f2,1,sum),digits=4)
 [1] -51.57 -43.19 -50.14 -39.65 -41.63 -49.34 -39.60 -48.19 -42.60 -48.26
> 
> g2 <- dmeasure(
+                euler.sir,
+                y=rbind(measles=X1$obs[,7,]),
+                x=X1$states,
+                times=t1,
+                params=matrix(
+                  log(params),
+                  nrow=length(params),
+                  ncol=10,
+                  dimnames=list(names(params),NULL)
+                  ),
+                log=TRUE
+                )
> print(apply(g2,1,sum),digits=4)
 [1]   -Inf   -Inf   -Inf   -Inf   -Inf   -Inf -263.6 -408.1   -Inf -468.1
> 
> h2 <- skeleton(
+                euler.sir,
+                x=X2$states[,1,55:70,drop=FALSE],
+                t=t2[55:70],
+                params=as.matrix(log(params))
+                )
> print(h2[c("S","I","R"),,],digits=4)
      [,1]     [,2]     [,3]     [,4]     [,5]   [,6]   [,7]   [,8]   [,9]
S  39362.0  39111.6  39195.1  38583.3  38374.5  36367  34769  33057  29765
I    272.3    376.1    407.8    615.6    731.6   1423   2046   2755   4083
R -39640.5 -39495.0 -39609.9 -39205.0 -39112.3 -37796 -36819 -35816 -33852
   [,10]  [,11]  [,12]    [,13]  [,14]  [,15]  [,16]
S  24577  17622  11393    319.5 -14707 -33518 -57305
I   6165   8975  11503  15834.2  21418  27852  34849
R -30746 -26601 -22900 -16156.5  -6714   5662  22453
> 
> print(max(abs(f2-f1),na.rm=T),digits=4)
[1] 8.882e-15
> print(max(abs(g2-g1),na.rm=T),digits=4)
[1] 0
> print(max(abs(h2-h1),na.rm=T),digits=4)
[1] 8.731e-11
> 
> data(euler.sir)
> states(euler.sir)[,1:2]
         [,1]          [,2]
S       45500  4.531800e+04
I        2100  2.038000e+03
R     2052400  2.052647e+06
cases       0  1.045000e+03
W           0 -2.334331e-01
B           0  5.200000e+01
SI          0  4.900000e+01
SD          0  0.000000e+00
IR          0  5.800000e+01
ID          0  0.000000e+00
RD          0  4.000000e+01
dW          0  9.808045e-04
> time(euler.sir) <- seq(0,1,by=1/52)
> states(euler.sir)[,1:3]
         [,1]    [,2]          [,3]
S       45500   45500  4.531800e+04
I        2100    2100  2.038000e+03
R     2052400 2052400  2.052647e+06
cases       0       0  1.045000e+03
W           0       0 -2.334331e-01
B           0       0  5.200000e+01
SI          0       0  4.900000e+01
SD          0       0  0.000000e+00
IR          0       0  5.800000e+01
ID          0       0  0.000000e+00
RD          0       0  4.000000e+01
dW          0       0  9.808045e-04
> states(simulate(euler.sir))[,1:3]
         [,1]    [,2]         [,3]
S       45500   45500 4.527200e+04
I        2100    2100 2.030000e+03
R     2052400 2052400 2.052644e+06
cases       0       0 1.034000e+03
W           0       0 1.415062e-01
B           0       0 3.700000e+01
SI          0       0 4.300000e+01
SD          0       0 0.000000e+00
IR          0       0 5.300000e+01
ID          0       0 0.000000e+00
RD          0       0 3.700000e+01
dW          0       0 9.553724e-04
> 
> dev.off()
null device 
          1 
> 
> 
