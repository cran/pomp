
R version 2.8.1 (2008-12-22)
Copyright (C) 2008 The R Foundation for Statistical Computing
ISBN 3-900051-07-0

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
Loading required package: deSolve
Loading required package: subplex
> 
> po <- pomp(
+            data=rbind(obs=rep(0,1000)),
+            times=0.1*seq.int(length=1000),
+            t0=0,
+            rprocess=euler.simulate,
+            step.fun=function(x,t,params,delta.t,...){
+              with(
+                   as.list(c(x,params)),
+                   rnorm(
+                         n=1,
+                         mean=n+r*n*(1-n/K)*delta.t,
+                         sd=sigma*n*sqrt(delta.t)
+                         )
+                   )
+            },
+            dprocess=onestep.density,
+            dens.fun=function(x1,x2,t1,t2,params,log,...){
+              delta.t <- t2-t1
+              with(
+                   as.list(c(x1,params)),
+                   dnorm(
+                         x=x2['n'],
+                         mean=n+r*n*(1-n/K)*delta.t,
+                         sd=sigma*n*sqrt(delta.t)
+                         )
+                   )
+            },
+            measurement.model=obs~lnorm(meanlog=log(n),sdlog=log(1+tau)),
+            skeleton.vectorfield=function(x,t,params,...){
+              with(
+                   as.list(c(x,params)),
+                   r*n*(1-n/K)
+                   )
+            },
+            delta.t=0.01
+            )
> 
> params <- c(n.0=10000,K=10000,r=0.9,sigma=0.4,tau=0.1)
> set.seed(73658676)
> po <- simulate(po,params=params)[[1]]
> 
> t <- seq(0,by=0.005,length=50)
> x <- simulate(po,times=t,states=T,obs=T)
> 
> print(
+       dprocess(
+                po,
+                x=x$states[,,45:50,drop=F],
+                times=t[45:50],
+                params=as.matrix(params),
+                log=TRUE
+                ),
+       digits=4
+       )
          [,1]      [,2]      [,3]      [,4]      [,5]
[1,] 0.0005193 0.0005474 0.0007635 0.0006043 0.0003857
> 
> print(
+       dmeasure(
+                po,
+                y=rbind(obs=x$obs[,1,45:50]),
+                x=x$states[,,45:50,drop=F],
+                times=t[45:50],
+                params=as.matrix(params),
+                log=TRUE
+                ),
+       digits=4
+       )
       [,1]  [,2]   [,3]   [,4]   [,5]   [,6]
[1,] -8.885 -7.98 -8.185 -11.11 -7.935 -8.135
> 
> print(
+       drop(
+            skeleton(
+                     po,
+                     x=array(
+                       seq(0,12000,by=1000),
+                       dim=c(1,1,13),
+                       dimnames=list('n',NULL,NULL)
+                       ),
+                     t=rep(0,13),
+                     params=as.matrix(params)
+                     )
+            ),
+       digits=4
+       )
 [1]     0   810  1440  1890  2160  2250  2160  1890  1440   810     0  -990
[13] -2160
>                
> params <- cbind(c(n.0=100,K=10000,r=0.2,sigma=0.4,tau=0.1),c(n.0=1000,K=11000,r=0.1,sigma=0.4,tau=0.1))
> x <- trajectory(po,params=params)
> pdf(file='logistic.pdf')
> matplot(time(po,t0=TRUE),t(x['n',,]),type='l')
> dev.off()
null device 
          1 
> 
