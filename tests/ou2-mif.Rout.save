
R version 3.2.4 Revised (2016-03-16 r70336) -- "Very Secure Dishes"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(pomp)
> 
> pompExample(ou2)
newly created object(s):
 ou2 
> 
> set.seed(64857673L)
> 
> obs(window(ou2,end=20,start=15))
        time
variable        15         16         17        18        19        20
      y1  8.598190   2.199643  -1.134924 -2.564136 -4.915368 -4.338996
      y2 -4.903347 -10.251144 -10.362431 -8.168859 -7.220312 -2.310222
> obs(window(ou2,end=5),"y1")
        time
variable         1         2        3        4        5
      y1 -1.700816 0.2421701 3.767589 5.685888 3.774526
> 
> fit1.pfilter <- pfilter(ou2,Np=1000)
> cat("coefficients at `truth'\n")
coefficients at `truth'
> print(coef(ou2,c('x1.0','x2.0','alpha.2','alpha.3')),digits=4)
   x1.0    x2.0 alpha.2 alpha.3 
   -3.0     4.0    -0.5     0.3 
> cat("particle filter log likelihood at truth\n")
particle filter log likelihood at truth
> print(fit1.pfilter$loglik,digits=4)
[1] -481.6
> 
> p.truth <- coef(ou2)
> guess2 <- guess1 <- p.truth
> guess1[c('x1.0','x2.0','alpha.2','alpha.3')] <- 0.5*guess1[c('x1.0','x2.0','alpha.2','alpha.3')]
> guess2[c('x1.0','x2.0','alpha.2','alpha.3')] <- 1.5*guess1[c('x1.0','x2.0','alpha.2','alpha.3')]
> 
> mif1 <- mif(ou2,Nmif=30,start=guess1,
+             ivps=c('x1.0','x2.0'),
+             rw.sd=c(
+               x1.0=5,x2.0=5,
+               alpha.2=0.1,alpha.3=0.1
+               ),
+             Np=1000,
+             var.factor=1,
+             ic.lag=10,
+             cooling.type="geometric",
+             cooling.fraction=0.95^50,
+             max.fail=100
+             )
> 
> mif2 <- mif(ou2,Nmif=30,start=guess2,
+             ivps=c('x1.0','x2.0'),
+             transform=TRUE,
+             rw.sd=c(
+               x1.0=5,x2.0=5,
+               alpha.2=0.1,alpha.3=0.1
+               ),
+             Np=1000,
+             var.factor=1,
+             ic.lag=10,
+             cooling.type="geometric",
+             cooling.fraction=0.95^50,
+             max.fail=100
+             )
> 
> pdf(file="ou2-mif.pdf")
> plot(mif1)
> plot(mif2)
> try(plot(mif1,mif2))
Warning message:
In plot(mif1, mif2) : 'mif2' is ignored
> plot(c(mif1,mif2))
> coef(c(mif1,mif2))
     alpha.1    alpha.2   alpha.3 alpha.4 sigma.1 sigma.2 sigma.3 tau      x1.0
[1,]     0.8 -0.4955163 0.3875201     0.9       3    -0.5       2   1 -3.626525
[2,]     0.8 -0.4685252 0.3638193     0.9       3    -0.5       2   1 -4.268469
         x2.0
[1,] 3.387519
[2,] 2.496912
> dev.off()
null device 
          1 
> 
> set.seed(33848585L)
> 
> try(
+     mif(
+         ou2,
+         Nmif=1,
+         ivps=c("x1.0","x2.0"),
+         rw.sd=c(x1.0=5,x2.0=5,alpha.1=0.1,alpha.4=0.2,alpha.3=0),
+         Np=100,ic.lag=10,var.factor=1
+         )
+     )
Error : mif error: 'cooling.fraction.50' must be specified
> 
> try(
+     mif(
+         ou2,
+         Nmif=1,
+         ivps=c("x1.0","x2.0"),
+         rw.sd=c(x1.0=5,x2.0=5,alpha.1=0,alpha.4=0.2,alpha.3=0),
+         Np=-10,cooling.type="geometric",cooling.fraction=0.95^50,
+         ic.lag=10,var.factor=1
+         )
+     )
Error : number of particles, 'Np', must always be positive
> 
> try(
+     mif(
+         ou2,
+         Nmif=-3,
+         ivps=c("x1.0","x2.0"),
+         rw.sd=c(x1.0=5,x2.0=5,alpha.1=0,alpha.4=0.2,alpha.3=0),
+         Np=11.6,cooling.type="geometric",cooling.fraction=0.95^50,
+         ic.lag=10,var.factor=1
+         )
+     )
Error : mif error: 'Nmif' must be a positive integer
> 
> try(
+     mif(
+         ou2,
+         Nmif=2,
+         start=c(alpha.1=0.9,alpha.2=0,alpha.3=0,alpha.4=-Inf,sigma.1=1,sigma.2=0,sigma.3=2,tau=1,x1.0=50,x2.0=-50),
+         ivps=c("x1.0","x2.0"),
+         rw.sd=c(x1.0=5,x2.0=5,alpha.1=0,alpha.4=0.2,alpha.3=0),
+         Np=11,cooling.type="geometric",cooling.fraction=0.95^50,
+         ic.lag=10,var.factor=1
+         )
+     )
Error : 'mif' cannot estimate non-finite parameters.
The following parameters are non-finite: 'alpha.4'
> 
> try(
+     mif(
+         ou2,
+         Nmif=2,
+         start=c(alpha.1=0.9,alpha.2=0,alpha.3=0,alpha.4=0.99,sigma.1=1,sigma.2=0,sigma.3=2,tau=1,x1.0=50,x2.0=NaN),
+         ivps=c("x1.0","x2.0"),
+         rw.sd=c(x1.0=5,x2.0=5,alpha.1=0,alpha.4=0.2,alpha.3=0),
+         Np=11,cooling.type="geometric",cooling.fraction=0.95^50,
+         ic.lag=10,var.factor=1
+         )
+     )
Error : 'mif' cannot estimate non-finite parameters.
The following parameters are non-finite: 'x2.0'
> 
> fit <- mif(
+            ou2,
+            Nmif=0,
+            ivps=c("x1.0","x2.0"),
+            rw.sd=c(x1.0=5,x2.0=5,alpha.2=0.1,alpha.3=0.2,alpha.3=0),
+            Np=100,cooling.type="geometric",cooling.fraction=0.95^50,
+            ic.lag=10,var.factor=1
+            )
> fit <- mif(
+            fit,
+            Nmif=2,
+            ivps=c("x1.0","x2.0"),
+            rw.sd=c(x1.0=5,x2.0=5,alpha.2=0.1,alpha.3=0.2),
+            Np=function(k)if(k<10) 2000 else 500,
+            cooling.type="geometric",cooling.fraction=0.95^50,
+            ic.lag=10,var.factor=1
+            )
> fit <- continue(fit)
> fit <- continue(fit,Nmif=2)
> ff <- pfilter(fit,pred.mean=T,filter.mean=T,pred.var=T,max.fail=100,verbose=T)
pfilter timestep 5 of 100 finished
pfilter timestep 10 of 100 finished
pfilter timestep 15 of 100 finished
pfilter timestep 20 of 100 finished
pfilter timestep 25 of 100 finished
pfilter timestep 30 of 100 finished
pfilter timestep 35 of 100 finished
pfilter timestep 40 of 100 finished
pfilter timestep 45 of 100 finished
pfilter timestep 50 of 100 finished
pfilter timestep 55 of 100 finished
pfilter timestep 60 of 100 finished
pfilter timestep 65 of 100 finished
pfilter timestep 70 of 100 finished
pfilter timestep 75 of 100 finished
pfilter timestep 80 of 100 finished
pfilter timestep 85 of 100 finished
pfilter timestep 90 of 100 finished
pfilter timestep 95 of 100 finished
pfilter timestep 100 of 100 finished
> ff <- pfilter(ff)
> fit <- mif(fit,rw.sd=c(x1.0=5,x2.0=5,alpha.2=0.1,alpha.3=0.1))
> fit <- continue(fit,Nmif=2,ivps=c("x1.0"))
> s <- coef(fit)
> s[2] <- 0.01
> fit <- mif(fit,Nmif=3,start=s)
> fit <- mif(ou2,Nmif=3,rw.sd=c(alpha.2=0.1,alpha.3=0.1),Np=1000,cooling.type="geometric",cooling.fraction=0.98^50,var.factor=1,ic.lag=2)
> fit <- continue(fit,Nmif=2,Np=2000)
> fit <- continue(fit,ivps=c("x1.0"),rw.sd=c(alpha.2=0.1,alpha.3=0.1,x1.0=5,x2.0=5),Nmif=2)
> ff <- pfilter(fit)
> fit <- mif(
+            ff,
+            Nmif=2,
+            ivps=c("x1.0","x2.0"),
+            rw.sd=c(x1.0=5,x2.0=5,alpha.2=0.1,alpha.3=0.2),
+            cooling.fraction=0.95^50,ic.lag=10,var.factor=1
+            )
> 
> proc.time()
   user  system elapsed 
  7.244   0.020   7.253 
